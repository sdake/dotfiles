{
  "version": 3,
  "sources": ["../src/create_new_session.tsx", "../src/utils/sessionUtils.ts", "../src/config.ts", "../src/utils/terminalUtils.ts"],
  "sourcesContent": ["import { useState } from \"react\";\nimport { Action, ActionPanel, Form, getPreferenceValues, popToRoot, showToast, Toast } from \"@raycast/api\";\nimport { createNewSession, directoryExists, getAllSession } from \"./utils/sessionUtils\";\n\nexport default function CreateNewTmuxSession() {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [sessionNameError, setSessionNameError] = useState<string>(\"\");\n  const [sessionDirectoryError, setSessionDirectoryError] = useState<string>(\"\");\n  const preferences = getPreferenceValues();\n  const defaultDirectory = preferences.defaultDirectory ? [preferences.defaultDirectory] : [\"/\"];\n\n  return (\n    <Form\n      isLoading={loading}\n      navigationTitle=\"Create New Tmux Session\"\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm\n            title=\"Create New Session\"\n            onSubmit={async (values) => {\n              const sessionName = values.newSessionName;\n              const sessionDirectory = values.newSessionDirectory[0];\n              setLoading(true);\n\n              const toast = await showToast({\n                style: Toast.Style.Animated,\n                title: \"\",\n              });\n\n              if (!sessionName) {\n                const errorMessage = \"Session name is required\";\n                setSessionNameError(errorMessage);\n                toast.style = Toast.Style.Failure;\n                toast.message = errorMessage;\n                setLoading(false);\n                return;\n              }\n\n              if (sessionDirectory && !directoryExists(sessionDirectory)) {\n                const errorMessage = \"The directory you selected does not exist\";\n                setSessionDirectoryError(errorMessage);\n                toast.style = Toast.Style.Failure;\n                toast.message = errorMessage;\n                setLoading(false);\n                return;\n              }\n\n              createNewSession(\n                sessionName,\n                sessionDirectory || preferences.defaultDirectory || \"/\",\n                (error, _stdout, stderr) => {\n                  if (error || stderr) {\n                    console.error(`exec error: ${error}`);\n                    setLoading(false);\n                    toast.style = Toast.Style.Failure;\n                    toast.message = \"Failed to create new session\";\n                    return;\n                  }\n\n                  toast.style = Toast.Style.Success;\n                  toast.message = `New session ${sessionName} is setup successfully`;\n                  setLoading(false);\n                  popToRoot();\n                },\n              );\n            }}\n          />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField\n        title=\"New Session Name\"\n        id=\"newSessionName\"\n        error={sessionNameError}\n        onChange={(value) => {\n          if (!value || value.length === 0) {\n            return;\n          }\n\n          getAllSession((error, stdout, stderr) => {\n            if (error || stderr) {\n              console.error(`exec error: ${error}`);\n              setLoading(false);\n            }\n\n            const lines = stdout.trim().split(\"\\n\");\n\n            if (lines.includes(value)) {\n              setSessionNameError(\"Session name already exists\");\n            } else {\n              setSessionNameError(\"\");\n            }\n          });\n        }}\n      />\n      <Form.FilePicker\n        title=\"New Session Directory\"\n        id=\"newSessionDirectory\"\n        allowMultipleSelection={false}\n        defaultValue={defaultDirectory}\n        canChooseDirectories\n        canChooseFiles={false}\n        error={sessionDirectoryError}\n        onChange={(value) => {\n          if (!value || value.length === 0) {\n            return;\n          }\n          setSessionDirectoryError(\"\");\n        }}\n      />\n    </Form>\n  );\n}\n", "import { type ChildProcess, exec, type ExecException } from \"node:child_process\";\nimport { env } from \"../config\";\nimport { showHUD, showToast, Toast } from \"@raycast/api\";\nimport { openTerminal } from \"./terminalUtils\";\nimport fs from \"node:fs\";\nexport function getAllSession(\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void,\n): ChildProcess {\n  return exec(`tmux list-sessions | awk '{print $1}' | sed 's/://'`, { env }, callback);\n}\n\nexport function directoryExists(directory: string): boolean {\n  return fs.existsSync(directory);\n}\n\nexport function createNewSession(\n  sessionName: string,\n  sessionDirectory: string,\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void,\n): ChildProcess {\n  const spaceEscapedSessionDirectory = sessionDirectory.replace(\" \", \"\\\\ \");\n\n  return exec(`tmux new-session -d -s ${sessionName} -c ${spaceEscapedSessionDirectory}`, { env }, callback);\n}\n\nexport function renameSession(\n  oldSessionName: string,\n  newSessionName: string,\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void,\n): ChildProcess {\n  return exec(`tmux rename-session -t ${oldSessionName} ${newSessionName}`, { env }, callback);\n}\n\nexport async function switchToSession(session: string, setLoading: (value: boolean) => void) {\n  const toast = await showToast({ style: Toast.Style.Animated, title: \"\" });\n  setLoading(true);\n\n  exec(`tmux switch -t ${session}`, { env }, async (error, stdout, stderr) => {\n    if (error || stderr) {\n      console.error(`exec error: ${error || stderr}`);\n\n      toast.style = Toast.Style.Failure;\n      toast.title = \"No tmux client found \uD83D\uDE22\";\n      toast.message = error ? error.message : stderr;\n      setLoading(false);\n\n      return;\n    }\n\n    try {\n      await openTerminal();\n\n      toast.style = Toast.Style.Success;\n      toast.title = `Switched to session ${session}`;\n      await showHUD(`Switched to session ${session}`);\n      setLoading(false);\n    } catch (e) {\n      toast.style = Toast.Style.Failure;\n      toast.title = \"Terminal not supported \uD83D\uDE22\";\n      setLoading(false);\n    }\n    return;\n  });\n}\n\nexport async function deleteSession(session: string, setLoading: (value: boolean) => void, callback: () => void) {\n  setLoading(true);\n  const toast = await showToast({ style: Toast.Style.Animated, title: \"\" });\n\n  exec(`tmux kill-session -t ${session}`, { env }, (error, stdout, stderr) => {\n    if (error || stderr) {\n      console.error(`exec error: ${error || stderr}`);\n\n      toast.style = Toast.Style.Failure;\n      toast.title = \"Something went wrong \uD83D\uDE22\";\n      toast.message = error ? error.message : stderr;\n      setLoading(false);\n      return;\n    }\n\n    toast.style = Toast.Style.Success;\n    toast.title = `Deleted session ${session}`;\n    callback();\n    setLoading(false);\n  });\n}\n", "export const env = Object.assign({}, process.env, { PATH: \"/usr/local/bin:/usr/bin:/opt/homebrew/bin\" });\n", "import { LocalStorage } from \"@raycast/api\";\nimport { execSync } from \"child_process\";\n\nexport async function checkTerminalSetup(callback: (isTerminalSetup: boolean) => void): Promise<boolean> {\n  const localTerminalAppName = await LocalStorage.getItem<string>(\"terminalAppBundleId\");\n  const isTerminalSetup = Boolean(localTerminalAppName);\n  callback(isTerminalSetup);\n  return isTerminalSetup;\n}\n\nexport async function openTerminal() {\n  const localTerminalAppBundleId = await LocalStorage.getItem<string>(\"terminalAppBundleId\");\n  execSync(`open -b ${localTerminalAppBundleId}`);\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAyB,iBACzBC,EAA4F,wBCD5F,IAAAC,EAA4D,8BCArD,IAAMC,EAAM,OAAO,OAAO,CAAC,EAAG,QAAQ,IAAK,CAAE,KAAM,2CAA4C,CAAC,EDEvG,IAAAC,EAA0C,wBEF1C,IAAAC,EAA6B,wBFI7B,IAAAC,EAAe,sBACR,SAASC,EACdC,EACc,CACd,SAAO,QAAK,sDAAuD,CAAE,IAAAC,CAAI,EAAGD,CAAQ,CACtF,CAEO,SAASE,EAAgBC,EAA4B,CAC1D,OAAO,EAAAC,QAAG,WAAWD,CAAS,CAChC,CAEO,SAASE,EACdC,EACAC,EACAP,EACc,CACd,IAAMQ,EAA+BD,EAAiB,QAAQ,IAAK,KAAK,EAExE,SAAO,QAAK,0BAA0BD,CAAW,OAAOE,CAA4B,GAAI,CAAE,IAAAP,CAAI,EAAGD,CAAQ,CAC3G,CDXI,IAAAS,EAAA,6BARW,SAARC,GAAwC,CAC7C,GAAM,CAACC,EAASC,CAAU,KAAI,YAAkB,EAAK,EAC/C,CAACC,EAAkBC,CAAmB,KAAI,YAAiB,EAAE,EAC7D,CAACC,EAAuBC,CAAwB,KAAI,YAAiB,EAAE,EACvEC,KAAc,uBAAoB,EAClCC,EAAmBD,EAAY,iBAAmB,CAACA,EAAY,gBAAgB,EAAI,CAAC,GAAG,EAE7F,SACE,QAAC,QACC,UAAWN,EACX,gBAAgB,0BAChB,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CACC,MAAM,qBACN,SAAU,MAAOQ,GAAW,CAC1B,IAAMC,EAAcD,EAAO,eACrBE,EAAmBF,EAAO,oBAAoB,CAAC,EACrDP,EAAW,EAAI,EAEf,IAAMU,EAAQ,QAAM,aAAU,CAC5B,MAAO,QAAM,MAAM,SACnB,MAAO,EACT,CAAC,EAED,GAAI,CAACF,EAAa,CAChB,IAAMG,EAAe,2BACrBT,EAAoBS,CAAY,EAChCD,EAAM,MAAQ,QAAM,MAAM,QAC1BA,EAAM,QAAUC,EAChBX,EAAW,EAAK,EAChB,MACF,CAEA,GAAIS,GAAoB,CAACG,EAAgBH,CAAgB,EAAG,CAC1D,IAAME,EAAe,4CACrBP,EAAyBO,CAAY,EACrCD,EAAM,MAAQ,QAAM,MAAM,QAC1BA,EAAM,QAAUC,EAChBX,EAAW,EAAK,EAChB,MACF,CAEAa,EACEL,EACAC,GAAoBJ,EAAY,kBAAoB,IACpD,CAACS,EAAOC,EAASC,IAAW,CAC1B,GAAIF,GAASE,EAAQ,CACnB,QAAQ,MAAM,eAAeF,CAAK,EAAE,EACpCd,EAAW,EAAK,EAChBU,EAAM,MAAQ,QAAM,MAAM,QAC1BA,EAAM,QAAU,+BAChB,MACF,CAEAA,EAAM,MAAQ,QAAM,MAAM,QAC1BA,EAAM,QAAU,eAAeF,CAAW,yBAC1CR,EAAW,EAAK,KAChB,aAAU,CACZ,CACF,CACF,EACF,EACF,EAGF,oBAAC,OAAK,UAAL,CACC,MAAM,mBACN,GAAG,iBACH,MAAOC,EACP,SAAWgB,GAAU,CACf,CAACA,GAASA,EAAM,SAAW,GAI/BC,EAAc,CAACJ,EAAOK,EAAQH,IAAW,EACnCF,GAASE,KACX,QAAQ,MAAM,eAAeF,CAAK,EAAE,EACpCd,EAAW,EAAK,GAGJmB,EAAO,KAAK,EAAE,MAAM;AAAA,CAAI,EAE5B,SAASF,CAAK,EACtBf,EAAoB,6BAA6B,EAEjDA,EAAoB,EAAE,CAE1B,CAAC,CACH,EACF,KACA,OAAC,OAAK,WAAL,CACC,MAAM,wBACN,GAAG,sBACH,uBAAwB,GACxB,aAAcI,EACd,qBAAoB,GACpB,eAAgB,GAChB,MAAOH,EACP,SAAWc,GAAU,CACf,CAACA,GAASA,EAAM,SAAW,GAG/Bb,EAAyB,EAAE,CAC7B,EACF,GACF,CAEJ",
  "names": ["create_new_session_exports", "__export", "CreateNewTmuxSession", "__toCommonJS", "import_react", "import_api", "import_node_child_process", "env", "import_api", "import_api", "import_node_fs", "getAllSession", "callback", "env", "directoryExists", "directory", "fs", "createNewSession", "sessionName", "sessionDirectory", "spaceEscapedSessionDirectory", "import_jsx_runtime", "CreateNewTmuxSession", "loading", "setLoading", "sessionNameError", "setSessionNameError", "sessionDirectoryError", "setSessionDirectoryError", "preferences", "defaultDirectory", "values", "sessionName", "sessionDirectory", "toast", "errorMessage", "directoryExists", "createNewSession", "error", "_stdout", "stderr", "value", "getAllSession", "stdout"]
}
