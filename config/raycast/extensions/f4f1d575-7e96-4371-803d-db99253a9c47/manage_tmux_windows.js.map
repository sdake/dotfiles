{
  "version": 3,
  "sources": ["../src/manage_tmux_windows.tsx", "../src/utils/terminalUtils.ts", "../src/utils/windowUtils.ts", "../src/config.ts", "../src/RenameTmux.tsx", "../src/utils/sessionUtils.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Color, Icon, launchCommand, LaunchType, List, useNavigation } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { checkTerminalSetup } from \"./utils/terminalUtils\";\nimport { deleteWindow, getAllWindow, switchToWindow, type TmuxWindow } from \"./utils/windowUtils\";\nimport { RenameTmux } from \"./RenameTmux\";\n\nexport default function ManageTmuxWindows() {\n  const [windows, setWindows] = useState<Array<TmuxWindow & { keyIndex: number }>>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isTerminalSetup, setIsTerminalSetup] = useState(false);\n\n  const { push } = useNavigation();\n\n  // Init list of windows\n  const setupListWindows = () => {\n    getAllWindow((error, stdout) => {\n      if (error) {\n        console.error(`exec error: ${error}`);\n        setIsLoading(false);\n        return;\n      }\n\n      const lines = stdout.trim().split(\"\\n\");\n\n      if (lines?.length > 0) {\n        let keyIndex = 0;\n        const windows = lines.map((line) => {\n          const [sessionName, windowName, windowIndex] = line.split(\":\");\n          keyIndex += 1; // NOTE: using key index for easily delete and remove window outside the original list\n          return {\n            keyIndex,\n            sessionName,\n            windowIndex: Number.parseInt(windowIndex),\n            windowName,\n          };\n        });\n\n        setWindows(windows);\n      }\n\n      setIsLoading(false);\n    });\n  };\n\n  // Terminal Setup Check\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n\n      const isSetup = await checkTerminalSetup(setIsTerminalSetup);\n\n      if (!isSetup) {\n        setIsLoading(false);\n        return;\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!isTerminalSetup) {\n      return;\n    }\n\n    // List down all tmux session\n    setIsLoading(true);\n    setupListWindows();\n  }, [isTerminalSetup]);\n\n  useEffect(() => {\n    if (isLoading || isTerminalSetup) {\n      return;\n    }\n    launchCommand({\n      type: LaunchType.UserInitiated,\n      name: \"choose_terminal_app\",\n      extensionName: \"tmux-sessioner\",\n      ownerOrAuthorName: \"louishuyng\",\n      context: { launcherCommand: \"manage_tmux_windows\" },\n    });\n  }, [isTerminalSetup, isLoading]);\n\n  return (\n    <List isLoading={isLoading}>\n      {windows.map((window, index) => (\n        <List.Item\n          key={index}\n          icon={Icon.Gear}\n          keywords={[window.sessionName, window.windowName]}\n          title={{\n            value: window.windowName,\n            tooltip: `Session: ${window.sessionName} / Window No: ${window.windowIndex}`,\n          }}\n          accessories={[\n            {\n              text: { value: window.sessionName, color: Color.Green },\n            },\n          ]}\n          actions={\n            <ActionPanel>\n              <Action title=\"Switch to Selected Window\" onAction={() => switchToWindow(window, setIsLoading)} />\n              <Action\n                title=\"Rename this Window\"\n                onAction={() => {\n                  push(\n                    <RenameTmux\n                      sessionName={window.sessionName}\n                      windowName={window.windowName}\n                      type=\"Window\"\n                      callback={() => setupListWindows()}\n                    />,\n                  );\n                }}\n                shortcut={{ modifiers: [\"cmd\", \"opt\"], key: \"r\" }}\n              />\n              <Action\n                title=\"Delete This Window\"\n                onAction={() =>\n                  deleteWindow(window, setIsLoading, () =>\n                    setWindows(windows.filter((w) => w.keyIndex !== window.keyIndex)),\n                  )\n                }\n                shortcut={{ modifiers: [\"cmd\", \"opt\"], key: \"x\" }}\n              />\n            </ActionPanel>\n          }\n        />\n      ))}\n    </List>\n  );\n}\n", "import { LocalStorage } from \"@raycast/api\";\nimport { execSync } from \"child_process\";\n\nexport async function checkTerminalSetup(callback: (isTerminalSetup: boolean) => void): Promise<boolean> {\n  const localTerminalAppName = await LocalStorage.getItem<string>(\"terminalAppBundleId\");\n  const isTerminalSetup = Boolean(localTerminalAppName);\n  callback(isTerminalSetup);\n  return isTerminalSetup;\n}\n\nexport async function openTerminal() {\n  const localTerminalAppBundleId = await LocalStorage.getItem<string>(\"terminalAppBundleId\");\n  execSync(`open -b ${localTerminalAppBundleId}`);\n}\n", "import { ChildProcess, exec, ExecException, execSync } from \"child_process\";\nimport { env } from \"../config\";\nimport { showHUD, showToast, Toast } from \"@raycast/api\";\nimport { openTerminal } from \"./terminalUtils\";\n\nexport interface TmuxWindow {\n  sessionName: string;\n  windowIndex: number;\n  windowName: string;\n}\n\nexport function getAllWindow(\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void,\n): ChildProcess {\n  return exec('tmux list-windows -aF \"#{session_name}:#{window_name}:#{window_index}\"', { env }, callback);\n}\nexport async function switchToWindow(window: TmuxWindow, setLoading: (value: boolean) => void) {\n  const toast = await showToast({ style: Toast.Style.Animated, title: \"\" });\n  setLoading(true);\n  const { sessionName: session, windowIndex, windowName } = window;\n\n  exec(`tmux switch -t ${session}`, { env }, async (error, stdout, stderr) => {\n    if (error || stderr) {\n      console.error(`exec error: ${error || stderr}`);\n\n      toast.style = Toast.Style.Failure;\n      toast.title = \"No tmux client found \uD83D\uDE22\";\n      toast.message = error ? error.message : stderr;\n      setLoading(false);\n\n      return;\n    }\n    execSync(`tmux select-window -t ${windowIndex}`, { env });\n\n    try {\n      await openTerminal();\n\n      toast.style = Toast.Style.Success;\n      toast.title = `Switched to window ${windowName}`;\n      await showHUD(`Switched to window ${windowName}`);\n      setLoading(false);\n    } catch (e) {\n      toast.style = Toast.Style.Failure;\n      toast.title = \"Terminal not supported \uD83D\uDE22\";\n      setLoading(false);\n    }\n    return;\n  });\n}\n\nexport function renameWindow(\n  sessionName: string,\n  oldWindowName: string,\n  newWindowName: string,\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void,\n): ChildProcess {\n  return exec(`tmux rename-window -t ${sessionName}:${oldWindowName} ${newWindowName}`, { env }, callback);\n}\n\nexport async function deleteWindow(window: TmuxWindow, setLoading: (value: boolean) => void, callback: () => void) {\n  setLoading(true);\n  const toast = await showToast({ style: Toast.Style.Animated, title: \"\" });\n\n  exec(`tmux kill-window -t ${window.sessionName}:${window.windowName}`, { env }, (error, stdout, stderr) => {\n    if (error || stderr) {\n      console.error(`exec error: ${error || stderr}`);\n\n      toast.style = Toast.Style.Failure;\n      toast.title = \"Something went wrong \uD83D\uDE22\";\n      toast.message = error ? error.message : stderr;\n      setLoading(false);\n      return;\n    }\n\n    toast.style = Toast.Style.Success;\n    toast.title = `Deleted window ${window.windowName}`;\n    callback();\n    setLoading(false);\n  });\n}\n", "export const env = Object.assign({}, process.env, { PATH: \"/usr/local/bin:/usr/bin:/opt/homebrew/bin\" });\n", "import { Action, ActionPanel, Form, Toast, showToast, useNavigation } from \"@raycast/api\";\n\nimport { useState } from \"react\";\nimport { getAllWindow, renameWindow } from \"./utils/windowUtils\";\nimport { ExecException } from \"child_process\";\nimport { renameSession } from \"./utils/sessionUtils\";\n\ninterface RenameTmuxProps {\n  sessionName: string;\n  windowName?: string;\n  type: \"Session\" | \"Window\";\n  callback?: () => void;\n}\n\nexport const RenameTmux = ({ sessionName, windowName, type, callback }: RenameTmuxProps) => {\n  const [loading, setLoading] = useState(false);\n  const [renamedValueError, setRenamedValueError] = useState<string>(\"\");\n  const { pop } = useNavigation();\n\n  return (\n    <Form\n      isLoading={loading}\n      navigationTitle={`Rename Tmux ${type}`}\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm\n            title={`Rename ${type}`}\n            onSubmit={async (values) => {\n              const renamedValue = values.renamedValue;\n              setLoading(true);\n\n              const toast = await showToast({\n                style: Toast.Style.Animated,\n                title: \"\",\n              });\n\n              if (\n                (renamedValue === windowName && type === \"Window\") ||\n                (renamedValue === sessionName && type === \"Session\")\n              ) {\n                toast.style = Toast.Style.Failure;\n                toast.message = `${type} name is not changed`;\n                setLoading(false);\n                return;\n              }\n              const renameCb = (error: ExecException | null, stdout: string, stderr: string) => {\n                if (error || stderr) {\n                  console.error(`exec error: ${error}`);\n                  setLoading(false);\n                  toast.style = Toast.Style.Failure;\n                  toast.message = `Failed to rename ${type.toLowerCase()}`;\n                  return;\n                }\n\n                toast.style = Toast.Style.Success;\n                toast.message = `${type} has been renamed to ${renamedValue}`;\n                setLoading(false);\n\n                callback && callback();\n                pop();\n              };\n\n              switch (type) {\n                case \"Session\":\n                  renameSession(sessionName, renamedValue, renameCb);\n                  break;\n                case \"Window\": {\n                  if (!windowName) {\n                    throw new Error(\"windowName is required for type Window\");\n                  }\n                  renameWindow(sessionName, windowName, renamedValue, renameCb);\n                  break;\n                }\n                default:\n                  break;\n              }\n            }}\n          />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField\n        title={`Renamed ${type}`}\n        id=\"renamedValue\"\n        error={renamedValueError}\n        defaultValue={windowName}\n        onChange={(value) => {\n          if (!value || value.length === 0 || value === windowName) {\n            return;\n          }\n\n          getAllWindow((error, stdout, stderr) => {\n            if (error || stderr) {\n              console.error(`exec error: ${error}`);\n              setLoading(false);\n            }\n\n            const lines = stdout.trim().split(\"\\n\");\n\n            if (lines.includes(value)) {\n              setRenamedValueError(`${type} name already exists, you can not rename to`);\n            } else {\n              setRenamedValueError(\"\");\n            }\n          });\n        }}\n      />\n    </Form>\n  );\n};\n", "import { type ChildProcess, exec, type ExecException } from \"node:child_process\";\nimport { env } from \"../config\";\nimport { showHUD, showToast, Toast } from \"@raycast/api\";\nimport { openTerminal } from \"./terminalUtils\";\nimport fs from \"node:fs\";\nexport function getAllSession(\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void,\n): ChildProcess {\n  return exec(`tmux list-sessions | awk '{print $1}' | sed 's/://'`, { env }, callback);\n}\n\nexport function directoryExists(directory: string): boolean {\n  return fs.existsSync(directory);\n}\n\nexport function createNewSession(\n  sessionName: string,\n  sessionDirectory: string,\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void,\n): ChildProcess {\n  const spaceEscapedSessionDirectory = sessionDirectory.replace(\" \", \"\\\\ \");\n\n  return exec(`tmux new-session -d -s ${sessionName} -c ${spaceEscapedSessionDirectory}`, { env }, callback);\n}\n\nexport function renameSession(\n  oldSessionName: string,\n  newSessionName: string,\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void,\n): ChildProcess {\n  return exec(`tmux rename-session -t ${oldSessionName} ${newSessionName}`, { env }, callback);\n}\n\nexport async function switchToSession(session: string, setLoading: (value: boolean) => void) {\n  const toast = await showToast({ style: Toast.Style.Animated, title: \"\" });\n  setLoading(true);\n\n  exec(`tmux switch -t ${session}`, { env }, async (error, stdout, stderr) => {\n    if (error || stderr) {\n      console.error(`exec error: ${error || stderr}`);\n\n      toast.style = Toast.Style.Failure;\n      toast.title = \"No tmux client found \uD83D\uDE22\";\n      toast.message = error ? error.message : stderr;\n      setLoading(false);\n\n      return;\n    }\n\n    try {\n      await openTerminal();\n\n      toast.style = Toast.Style.Success;\n      toast.title = `Switched to session ${session}`;\n      await showHUD(`Switched to session ${session}`);\n      setLoading(false);\n    } catch (e) {\n      toast.style = Toast.Style.Failure;\n      toast.title = \"Terminal not supported \uD83D\uDE22\";\n      setLoading(false);\n    }\n    return;\n  });\n}\n\nexport async function deleteSession(session: string, setLoading: (value: boolean) => void, callback: () => void) {\n  setLoading(true);\n  const toast = await showToast({ style: Toast.Style.Animated, title: \"\" });\n\n  exec(`tmux kill-session -t ${session}`, { env }, (error, stdout, stderr) => {\n    if (error || stderr) {\n      console.error(`exec error: ${error || stderr}`);\n\n      toast.style = Toast.Style.Failure;\n      toast.title = \"Something went wrong \uD83D\uDE22\";\n      toast.message = error ? error.message : stderr;\n      setLoading(false);\n      return;\n    }\n\n    toast.style = Toast.Style.Success;\n    toast.title = `Deleted session ${session}`;\n    callback();\n    setLoading(false);\n  });\n}\n"],
  "mappings": "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",
  "names": ["manage_tmux_windows_exports", "__export", "ManageTmuxWindows", "__toCommonJS", "import_api", "import_react", "import_api", "import_child_process", "checkTerminalSetup", "callback", "isTerminalSetup", "openTerminal", "localTerminalAppBundleId", "import_child_process", "env", "import_api", "getAllWindow", "callback", "env", "switchToWindow", "window", "setLoading", "toast", "session", "windowIndex", "windowName", "error", "stdout", "stderr", "openTerminal", "renameWindow", "sessionName", "oldWindowName", "newWindowName", "deleteWindow", "import_api", "import_react", "import_node_child_process", "import_api", "renameSession", "oldSessionName", "newSessionName", "callback", "env", "import_jsx_runtime", "RenameTmux", "sessionName", "windowName", "type", "callback", "loading", "setLoading", "renamedValueError", "setRenamedValueError", "pop", "values", "renamedValue", "toast", "renameCb", "error", "stdout", "stderr", "renameSession", "renameWindow", "value", "getAllWindow", "import_jsx_runtime", "ManageTmuxWindows", "windows", "setWindows", "isLoading", "setIsLoading", "isTerminalSetup", "setIsTerminalSetup", "push", "setupListWindows", "getAllWindow", "error", "stdout", "lines", "keyIndex", "line", "sessionName", "windowName", "windowIndex", "checkTerminalSetup", "window", "index", "switchToWindow", "RenameTmux", "deleteWindow", "w"]
}
